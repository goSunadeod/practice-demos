/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{var t={660:(t,e,r)=>{var n;!function(t){!function(e){var n="object"==typeof r.g?r.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),o=i(t);function i(t,e){return function(r,n){"function"!=typeof t[r]&&Object.defineProperty(t,r,{configurable:!0,writable:!0,value:n}),e&&e(r,n)}}void 0===n.Reflect?n.Reflect=t:o=i(n.Reflect,o),function(t){var e=Object.prototype.hasOwnProperty,r="function"==typeof Symbol,n=r&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",o=r&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",i="function"==typeof Object.create,u={__proto__:[]}instanceof Array,a=!i&&!u,c={create:i?function(){return C(Object.create(null))}:u?function(){return C({__proto__:null})}:function(){return C({})},has:a?function(t,r){return e.call(t,r)}:function(t,e){return e in t},get:a?function(t,r){return e.call(t,r)?t[r]:void 0}:function(t,e){return t[e]}},f=Object.getPrototypeOf(Function),s="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,l=s||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var t={},e=[],r=function(){function t(t,e,r){this._index=0,this._keys=t,this._values=e,this._selector=r}return t.prototype["@@iterator"]=function(){return this},t.prototype[o]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var r=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=e,this._values=e):this._index++,{value:r,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=e,this._values=e),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=e,this._values=e),{value:t,done:!0}},t}();return function(){function e(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._find(t,!1)>=0},e.prototype.get=function(t){var e=this._find(t,!1);return e>=0?this._values[e]:void 0},e.prototype.set=function(t,e){var r=this._find(t,!0);return this._values[r]=e,this},e.prototype.delete=function(e){var r=this._find(e,!1);if(r>=0){for(var n=this._keys.length,o=r+1;o<n;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,e===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},e.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},e.prototype.keys=function(){return new r(this._keys,this._values,n)},e.prototype.values=function(){return new r(this._keys,this._values,i)},e.prototype.entries=function(){return new r(this._keys,this._values,u)},e.prototype["@@iterator"]=function(){return this.entries()},e.prototype[o]=function(){return this.entries()},e.prototype._find=function(t,e){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&e&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},e}();function n(t,e){return t}function i(t,e){return e}function u(t,e){return[t,e]}}():Map,p=s||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function t(){this._map=new l}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[o]=function(){return this.keys()},t}():Set,y=new(s||"function"!=typeof WeakMap?function(){var t=c.create(),r=n();return function(){function t(){this._key=n()}return t.prototype.has=function(t){var e=o(t,!1);return void 0!==e&&c.has(e,this._key)},t.prototype.get=function(t){var e=o(t,!1);return void 0!==e?c.get(e,this._key):void 0},t.prototype.set=function(t,e){return o(t,!0)[this._key]=e,this},t.prototype.delete=function(t){var e=o(t,!1);return void 0!==e&&delete e[this._key]},t.prototype.clear=function(){this._key=n()},t}();function n(){var e;do{e="@@WeakMap@@"+u()}while(c.has(t,e));return t[e]=!0,e}function o(t,n){if(!e.call(t,r)){if(!n)return;Object.defineProperty(t,r,{value:c.create()})}return t[r]}function i(t,e){for(var r=0;r<e;++r)t[r]=255*Math.random()|0;return t}function u(){var t,e=(t=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):i(new Uint8Array(t),t):i(new Array(t),t));e[6]=79&e[6]|64,e[8]=191&e[8]|128;for(var r="",n=0;n<16;++n){var o=e[n];4!==n&&6!==n&&8!==n||(r+="-"),o<16&&(r+="0"),r+=o.toString(16).toLowerCase()}return r}}():WeakMap);function h(t,e,r){var n=y.get(t);if(j(n)){if(!r)return;n=new l,y.set(t,n)}var o=n.get(e);if(j(o)){if(!r)return;o=new l,n.set(e,o)}return o}function d(t,e,r){if(v(t,e,r))return!0;var n=K(e);return!S(n)&&d(t,n,r)}function v(t,e,r){var n=h(e,r,!1);return!j(n)&&!!n.has(t)}function _(t,e,r){if(v(t,e,r))return w(t,e,r);var n=K(e);return S(n)?void 0:_(t,n,r)}function w(t,e,r){var n=h(e,r,!1);if(!j(n))return n.get(t)}function b(t,e,r,n){h(r,n,!0).set(t,e)}function g(t,e){var r=m(t,e),n=K(t);if(null===n)return r;var o=g(n,e);if(o.length<=0)return r;if(r.length<=0)return o;for(var i=new p,u=[],a=0,c=r;a<c.length;a++){var f=c[a];i.has(f)||(i.add(f),u.push(f))}for(var s=0,l=o;s<l.length;s++)f=l[s],i.has(f)||(i.add(f),u.push(f));return u}function m(t,e){var r=[],n=h(t,e,!1);if(j(n))return r;for(var i=function(t){var e=A(t,o);if(!M(e))throw new TypeError;var r=e.call(t);if(!P(r))throw new TypeError;return r}(n.keys()),u=0;;){var a=R(i);if(!a)return r.length=u,r;var c=a.value;try{r[u]=c}catch(t){try{I(i)}finally{throw t}}u++}}function O(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function j(t){return void 0===t}function S(t){return null===t}function P(t){return"object"==typeof t?null!==t:"function"==typeof t}function k(t,e){switch(O(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var r=3===e?"string":5===e?"number":"default",o=A(t,n);if(void 0!==o){var i=o.call(t,r);if(P(i))throw new TypeError;return i}return function(t,e){if("string"===e){var r=t.toString;if(M(r)&&!P(o=r.call(t)))return o;if(M(n=t.valueOf)&&!P(o=n.call(t)))return o}else{var n;if(M(n=t.valueOf)&&!P(o=n.call(t)))return o;var o,i=t.toString;if(M(i)&&!P(o=i.call(t)))return o}throw new TypeError}(t,"default"===r?"number":r)}function x(t){var e=k(t,3);return"symbol"==typeof e?e:function(t){return""+t}(e)}function E(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function M(t){return"function"==typeof t}function T(t){return"function"==typeof t}function A(t,e){var r=t[e];if(null!=r){if(!M(r))throw new TypeError;return r}}function R(t){var e=t.next();return!e.done&&e}function I(t){var e=t.return;e&&e.call(t)}function K(t){var e=Object.getPrototypeOf(t);if("function"!=typeof t||t===f)return e;if(e!==f)return e;var r=t.prototype,n=r&&Object.getPrototypeOf(r);if(null==n||n===Object.prototype)return e;var o=n.constructor;return"function"!=typeof o||o===t?e:o}function C(t){return t.__=void 0,delete t.__,t}t("decorate",(function(t,e,r,n){if(j(r)){if(!E(t))throw new TypeError;if(!T(e))throw new TypeError;return function(t,e){for(var r=t.length-1;r>=0;--r){var n=(0,t[r])(e);if(!j(n)&&!S(n)){if(!T(n))throw new TypeError;e=n}}return e}(t,e)}if(!E(t))throw new TypeError;if(!P(e))throw new TypeError;if(!P(n)&&!j(n)&&!S(n))throw new TypeError;return S(n)&&(n=void 0),function(t,e,r,n){for(var o=t.length-1;o>=0;--o){var i=(0,t[o])(e,r,n);if(!j(i)&&!S(i)){if(!P(i))throw new TypeError;n=i}}return n}(t,e,r=x(r),n)})),t("metadata",(function(t,e){return function(r,n){if(!P(r))throw new TypeError;if(!j(n)&&!function(t){switch(O(t)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;b(t,e,r,n)}})),t("defineMetadata",(function(t,e,r,n){if(!P(r))throw new TypeError;return j(n)||(n=x(n)),b(t,e,r,n)})),t("hasMetadata",(function(t,e,r){if(!P(e))throw new TypeError;return j(r)||(r=x(r)),d(t,e,r)})),t("hasOwnMetadata",(function(t,e,r){if(!P(e))throw new TypeError;return j(r)||(r=x(r)),v(t,e,r)})),t("getMetadata",(function(t,e,r){if(!P(e))throw new TypeError;return j(r)||(r=x(r)),_(t,e,r)})),t("getOwnMetadata",(function(t,e,r){if(!P(e))throw new TypeError;return j(r)||(r=x(r)),w(t,e,r)})),t("getMetadataKeys",(function(t,e){if(!P(t))throw new TypeError;return j(e)||(e=x(e)),g(t,e)})),t("getOwnMetadataKeys",(function(t,e){if(!P(t))throw new TypeError;return j(e)||(e=x(e)),m(t,e)})),t("deleteMetadata",(function(t,e,r){if(!P(e))throw new TypeError;j(r)||(r=x(r));var n=h(e,r,!1);if(j(n))return!1;if(!n.delete(t))return!1;if(n.size>0)return!0;var o=y.get(e);return o.delete(r),o.size>0||y.delete(e),!0}))}(o)}()}(n||(n={}))},862:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.A=void 0;var n=r(421);e.A=function(){this.b=n.container.get("b")}},428:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.B=void 0;e.B=function(t){this.p=t}},421:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.container=e.Container=void 0;var r=function(){function t(){this.bindMap=new Map}return t.prototype.bind=function(t,e,r){this.bindMap.set(t,{clazz:e,constructorArgs:r})},t.prototype.get=function(t){var e=this.bindMap.get(t),r=e.clazz,n=e.constructorArgs;return Reflect.construct(r,n)},t}();e.Container=r;var n=new r;e.container=n},489:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.B=void 0;var n=r(655);r(660);var o=r(49),i="ioc:key",u="ioc:key",a=function(){function t(){}return t.prototype.hello=function(){return"hello world"},n.__decorate([Reflect.metadata(u,"B"),n.__metadata("design:type",Function),n.__metadata("design:paramtypes",[]),n.__metadata("design:returntype",String)],t.prototype,"hello",null),n.__decorate([Reflect.metadata(i,"A")],t)}();console.log(Reflect.getMetadata(i,a)),console.log(Reflect.getMetadata(u,new a,"hello"));var c=function(){function t(t){this.p=t}return n.__decorate([o.Provider("b",[10]),n.__metadata("design:paramtypes",[Number])],t)}();e.B=c,console.log(new c(1)),console.log(Reflect.getMetadata("ioc:tagged_class",c))},982:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load=void 0;var n=r(655),o=n.__importStar(r(747)),i=r(49);e.load=function(t){var e,u,a=o.readdirSync("./");try{for(var c=n.__values(a),f=c.next();!f.done;f=c.next()){var s=f.value;if(/\.ts$/.test(s)){var l=r(116)("./"+s);for(var p in l){var y=l[p];if("function"==typeof y){var h=Reflect.getMetadata(i.CLASS_KEY,y);h&&t.bind(h.id,y,h.args)}}}}}catch(t){e={error:t}}finally{try{f&&!f.done&&(u=c.return)&&u.call(c)}finally{if(e)throw e.error}}}},981:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(421);r(982).load(n.container),console.log(n.container.get("a"))},49:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Provider=e.CLASS_KEY=void 0,r(660),e.CLASS_KEY="ioc:tagged_class",e.Provider=function(t,r){return function(n){return Reflect.defineMetadata(e.CLASS_KEY,{id:t,args:r||[]},n),n}}},656:()=>{},655:(t,e,r)=>{"use strict";r.r(e),r.d(e,{__extends:()=>o,__assign:()=>i,__rest:()=>u,__decorate:()=>a,__param:()=>c,__metadata:()=>f,__awaiter:()=>s,__generator:()=>l,__createBinding:()=>p,__exportStar:()=>y,__values:()=>h,__read:()=>d,__spread:()=>v,__spreadArrays:()=>_,__await:()=>w,__asyncGenerator:()=>b,__asyncDelegator:()=>g,__asyncValues:()=>m,__makeTemplateObject:()=>O,__importStar:()=>j,__importDefault:()=>S,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>k});var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function o(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var i=function(){return(i=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function u(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(t);o<n.length;o++)e.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(t,n[o])&&(r[n[o]]=t[n[o]])}return r}function a(t,e,r,n){var o,i=arguments.length,u=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(u=(i<3?o(u):i>3?o(e,r,u):o(e,r))||u);return i>3&&u&&Object.defineProperty(e,r,u),u}function c(t,e){return function(r,n){e(r,n,t)}}function f(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function s(t,e,r,n){return new(r||(r=Promise))((function(o,i){function u(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(u,a)}c((n=n.apply(t,e||[])).next())}))}function l(t,e){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function p(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}function y(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||(e[r]=t[r])}function h(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(d(arguments[e]));return t}function _(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],u=0,a=i.length;u<a;u++,o++)n[o]=i[u];return n}function w(t){return this instanceof w?(this.v=t,this):new w(t)}function b(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(t,e||[]),i=[];return n={},u("next"),u("throw"),u("return"),n[Symbol.asyncIterator]=function(){return this},n;function u(t){o[t]&&(n[t]=function(e){return new Promise((function(r,n){i.push([t,e,r,n])>1||a(t,e)}))})}function a(t,e){try{(r=o[t](e)).value instanceof w?Promise.resolve(r.value.v).then(c,f):s(i[0][2],r)}catch(t){s(i[0][3],t)}var r}function c(t){a("next",t)}function f(t){a("throw",t)}function s(t,e){t(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}function g(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,o){e[n]=t[n]?function(e){return(r=!r)?{value:w(t[n](e)),done:"return"===n}:o?o(e):e}:o}}function m(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=h(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,o){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,o,(e=t[r](e)).done,e.value)}))}}}function O(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function j(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}function S(t){return t&&t.__esModule?t:{default:t}}function P(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function k(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r}},116:(t,e,r)=>{var n={"./a":862,"./a.ts":862,"./b":428,"./b.ts":428,"./container":421,"./container.ts":421,"./demo":489,"./demo.ts":489,"./load":982,"./load.ts":982,"./main":981,"./main.ts":981,"./provider":49,"./provider.ts":49,"./question":656,"./question.ts":656};function o(t){var e=i(t);return r(e)}function i(t){if(!r.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}o.keys=function(){return Object.keys(n)},o.resolve=i,t.exports=o,o.id=116},747:t=>{"use strict";t.exports=require("fs")}},e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r(981)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Jb0MtREkvLi9ub2RlX21vZHVsZXMvcmVmbGVjdC1tZXRhZGF0YS9SZWZsZWN0LmpzIiwid2VicGFjazovL0lvQy1ESS8uL3NyYy9hLnRzIiwid2VicGFjazovL0lvQy1ESS8uL3NyYy9iLnRzIiwid2VicGFjazovL0lvQy1ESS8uL3NyYy9jb250YWluZXIudHMiLCJ3ZWJwYWNrOi8vSW9DLURJLy4vc3JjL2RlbW8udHMiLCJ3ZWJwYWNrOi8vSW9DLURJLy4vc3JjL2xvYWQudHMiLCJ3ZWJwYWNrOi8vSW9DLURJLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vSW9DLURJLy4vc3JjL3Byb3ZpZGVyLnRzIiwid2VicGFjazovL0lvQy1ESS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vSW9DLURJLy9Vc2Vycy94aHEvRG9jdW1lbnRzL3N0dWR5L3ByYWN0aWNlLWRlbW9zL0lvQy1ESS9zcmN8c3luY3wvXlxcLlxcLy4qJC8iLCJ3ZWJwYWNrOi8vSW9DLURJL2V4dGVybmFsIFwiZnNcIiIsIndlYnBhY2s6Ly9Jb0MtREkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vSW9DLURJL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Jb0MtREkvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9Jb0MtREkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Jb0MtREkvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Jb0MtREkvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIlJlZmxlY3QiLCJmYWN0b3J5Iiwicm9vdCIsImciLCJzZWxmIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXhwb3J0ZXIiLCJtYWtlRXhwb3J0ZXIiLCJ0YXJnZXQiLCJwcmV2aW91cyIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImhhc093biIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwic3VwcG9ydHNTeW1ib2wiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZVN5bWJvbCIsInRvUHJpbWl0aXZlIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsInN1cHBvcnRzQ3JlYXRlIiwiY3JlYXRlIiwic3VwcG9ydHNQcm90byIsIl9fcHJvdG9fXyIsIkFycmF5IiwiZG93bkxldmVsIiwiSGFzaE1hcCIsIk1ha2VEaWN0aW9uYXJ5IiwiaGFzIiwibWFwIiwiY2FsbCIsImdldCIsInVuZGVmaW5lZCIsImZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJ1c2VQb2x5ZmlsbCIsInByb2Nlc3MiLCJlbnYiLCJfTWFwIiwiTWFwIiwiZW50cmllcyIsImNhY2hlU2VudGluZWwiLCJhcnJheVNlbnRpbmVsIiwiTWFwSXRlcmF0b3IiLCJrZXlzIiwidmFsdWVzIiwic2VsZWN0b3IiLCJfaW5kZXgiLCJfa2V5cyIsIl92YWx1ZXMiLCJfc2VsZWN0b3IiLCJuZXh0IiwiaW5kZXgiLCJsZW5ndGgiLCJyZXN1bHQiLCJkb25lIiwidGhyb3ciLCJlcnJvciIsInJldHVybiIsIl9jYWNoZUtleSIsIl9jYWNoZUluZGV4IiwiZW51bWVyYWJsZSIsIl9maW5kIiwic2V0IiwiZGVsZXRlIiwic2l6ZSIsImkiLCJjbGVhciIsImdldEtleSIsImdldFZhbHVlIiwiZ2V0RW50cnkiLCJpbnNlcnQiLCJpbmRleE9mIiwicHVzaCIsIl8iLCJDcmVhdGVNYXBQb2x5ZmlsbCIsIl9TZXQiLCJTZXQiLCJfbWFwIiwiYWRkIiwiTWV0YWRhdGEiLCJXZWFrTWFwIiwicm9vdEtleSIsIkNyZWF0ZVVuaXF1ZUtleSIsIl9rZXkiLCJ0YWJsZSIsIkdldE9yQ3JlYXRlV2Vha01hcFRhYmxlIiwiQ3JlYXRlVVVJRCIsIkZpbGxSYW5kb21CeXRlcyIsImJ1ZmZlciIsIk1hdGgiLCJyYW5kb20iLCJkYXRhIiwiVWludDhBcnJheSIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIm1zQ3J5cHRvIiwib2Zmc2V0IiwiYnl0ZSIsInRvU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJDcmVhdGVXZWFrTWFwUG9seWZpbGwiLCJHZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwiTyIsIlAiLCJDcmVhdGUiLCJ0YXJnZXRNZXRhZGF0YSIsIklzVW5kZWZpbmVkIiwibWV0YWRhdGFNYXAiLCJPcmRpbmFyeUhhc01ldGFkYXRhIiwiTWV0YWRhdGFLZXkiLCJPcmRpbmFyeUhhc093bk1ldGFkYXRhIiwicGFyZW50IiwiT3JkaW5hcnlHZXRQcm90b3R5cGVPZiIsIklzTnVsbCIsIk9yZGluYXJ5R2V0TWV0YWRhdGEiLCJPcmRpbmFyeUdldE93bk1ldGFkYXRhIiwiT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsIk1ldGFkYXRhVmFsdWUiLCJPcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm93bktleXMiLCJPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsInBhcmVudEtleXMiLCJfaSIsIm93bktleXNfMSIsIl9hIiwicGFyZW50S2V5c18xIiwib2JqIiwibWV0aG9kIiwiR2V0TWV0aG9kIiwiSXNDYWxsYWJsZSIsIlR5cGVFcnJvciIsIklzT2JqZWN0IiwiR2V0SXRlcmF0b3IiLCJrIiwiSXRlcmF0b3JTdGVwIiwibmV4dFZhbHVlIiwiZSIsIkl0ZXJhdG9yQ2xvc2UiLCJUeXBlIiwieCIsIlRvUHJpbWl0aXZlIiwiaW5wdXQiLCJQcmVmZXJyZWRUeXBlIiwiaGludCIsImV4b3RpY1RvUHJpbSIsInRvU3RyaW5nXzEiLCJ2YWx1ZU9mIiwidG9TdHJpbmdfMiIsIk9yZGluYXJ5VG9QcmltaXRpdmUiLCJUb1Byb3BlcnR5S2V5IiwiYXJndW1lbnQiLCJUb1N0cmluZyIsIklzQXJyYXkiLCJpc0FycmF5IiwiSXNDb25zdHJ1Y3RvciIsIlYiLCJmdW5jIiwiZiIsInByb3RvIiwicHJvdG90eXBlUHJvdG8iLCJjb25zdHJ1Y3RvciIsIl9fIiwiZGVjb3JhdG9ycyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlY29yYXRlZCIsImRlY29yYXRvciIsIkRlY29yYXRlQ29uc3RydWN0b3IiLCJkZXNjcmlwdG9yIiwiRGVjb3JhdGVQcm9wZXJ0eSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIklzUHJvcGVydHlLZXkiLCJleHBvcnRzIiwiQSIsImNvbnRhaW5lcl8xIiwiYiIsImNvbnRhaW5lciIsIkIiLCJwIiwiQ29udGFpbmVyIiwiYmluZE1hcCIsImJpbmQiLCJpZGVudGlmaWVyIiwiY2xhenoiLCJjb25zdHJ1Y3RvckFyZ3MiLCJjb25zdHJ1Y3QiLCJ0c2xpYl8xIiwicHJvdmlkZXJfMSIsIkNMQVNTX0tFWSIsIk1FVEhPRF9LRVkiLCJUZXN0IiwiaGVsbG8iLCJfX2RlY29yYXRlIiwibWV0YWRhdGEiLCJfX21ldGFkYXRhIiwiU3RyaW5nIiwiY29uc29sZSIsImxvZyIsImdldE1ldGFkYXRhIiwiUHJvdmlkZXIiLCJOdW1iZXIiLCJsb2FkIiwiZnMiLCJfX2ltcG9ydFN0YXIiLCJlXzEiLCJsaXN0IiwicmVhZGRpclN5bmMiLCJsaXN0XzEiLCJfX3ZhbHVlcyIsImxpc3RfMV8xIiwiZmlsZSIsInRlc3QiLCJtIiwibW9kdWxlIiwiaWQiLCJhcmdzIiwiZV8xXzEiLCJkZWZpbmVNZXRhZGF0YSIsImV4dGVuZFN0YXRpY3MiLCJkIiwic2V0UHJvdG90eXBlT2YiLCJfX2V4dGVuZHMiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJzIiwibiIsImFyZ3VtZW50cyIsImFwcGx5IiwiX19yZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJkZXNjIiwiYyIsInIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWNvcmF0ZSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJ5IiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ2Iiwib3AiLCJwb3AiLCJfX2NyZWF0ZUJpbmRpbmciLCJvIiwiazIiLCJfX2V4cG9ydFN0YXIiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImEiLCJqIiwiamwiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJxIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsInNoaWZ0IiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsInJhdyIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX19pbXBvcnREZWZhdWx0IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJFcnJvciIsImNvZGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJwcm9wIiwidG9TdHJpbmdUYWciXSwibWFwcGluZ3MiOiI7MkJBY0EsSUFBSUEsR0FDSixTQUFXQSxJQUdQLFNBQVdDLEdBQ1AsSUFBSUMsRUFBeUIsaUJBQVgsRUFBQUMsRUFBc0IsRUFBQUEsRUFDcEIsaUJBQVRDLEtBQW9CQSxLQUNQLGlCQUFUQyxLQUFvQkEsS0FDdkJDLFNBQVMs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QVN6SyxJQUM1RUUsT0FBT0MsZUFBZXNLLEVBQVN6SyxFQUFLLENBQUV3RCxZQUFZLEVBQU05QixJQUFLb1IsRUFBVzlTLE1DSjNFdVMsRUFBb0IvUyxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmdVQsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPclQsTUFBUSxJQUFJQyxTQUFTLGNBQWIsR0FDZCxNQUFPeUksR0FDUixHQUFzQixpQkFBWDRLLE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCVCxFQUFvQnBDLEVBQUksQ0FBQ3pJLEVBQUt1TCxJQUFTL1MsT0FBT0ssVUFBVUMsZUFBZWlCLEtBQUtpRyxFQUFLdUwsR0NDakZWLEVBQW9CaEUsRUFBSzlELElBQ0gsb0JBQVgvSixRQUEwQkEsT0FBT3dTLGFBQzFDaFQsT0FBT0MsZUFBZXNLLEVBQVMvSixPQUFPd1MsWUFBYSxDQUFFalQsTUFBTyxXQUU3REMsT0FBT0MsZUFBZXNLLEVBQVMsYUFBYyxDQUFFeEssT0FBTyxLQ0Z2RHNTLEVBQW9CLE0iLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChDKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cblxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xudmFyIFJlZmxlY3Q7XG4oZnVuY3Rpb24gKFJlZmxlY3QpIHtcbiAgICAvLyBNZXRhZGF0YSBQcm9wb3NhbFxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvXG4gICAgKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgICAgIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gICAgICAgICAgICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzID09PSBcIm9iamVjdFwiID8gdGhpcyA6XG4gICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uKFwicmV0dXJuIHRoaXM7XCIpKCk7XG4gICAgICAgIHZhciBleHBvcnRlciA9IG1ha2VFeHBvcnRlcihSZWZsZWN0KTtcbiAgICAgICAgaWYgKHR5cGVvZiByb290LlJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJvb3QuUmVmbGVjdCA9IFJlZmxlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHBvcnRlciA9IG1ha2VFeHBvcnRlcihyb290LlJlZmxlY3QsIGV4cG9ydGVyKTtcbiAgICAgICAgfVxuICAgICAgICBmYWN0b3J5KGV4cG9ydGVyKTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUV4cG9ydGVyKHRhcmdldCwgcHJldmlvdXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHsgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXMpXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pKGZ1bmN0aW9uIChleHBvcnRlcikge1xuICAgICAgICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgICAgICAgLy8gZmVhdHVyZSB0ZXN0IGZvciBTeW1ib2wgc3VwcG9ydFxuICAgICAgICB2YXIgc3VwcG9ydHNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIHZhciB0b1ByaW1pdGl2ZVN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sICYmIHR5cGVvZiBTeW1ib2wudG9QcmltaXRpdmUgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wudG9QcmltaXRpdmUgOiBcIkBAdG9QcmltaXRpdmVcIjtcbiAgICAgICAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gc3VwcG9ydHNTeW1ib2wgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbC5pdGVyYXRvciA6IFwiQEBpdGVyYXRvclwiO1xuICAgICAgICB2YXIgc3VwcG9ydHNDcmVhdGUgPSB0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gXCJmdW5jdGlvblwiOyAvLyBmZWF0dXJlIHRlc3QgZm9yIE9iamVjdC5jcmVhdGUgc3VwcG9ydFxuICAgICAgICB2YXIgc3VwcG9ydHNQcm90byA9IHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXk7IC8vIGZlYXR1cmUgdGVzdCBmb3IgX19wcm90b19fIHN1cHBvcnRcbiAgICAgICAgdmFyIGRvd25MZXZlbCA9ICFzdXBwb3J0c0NyZWF0ZSAmJiAhc3VwcG9ydHNQcm90bztcbiAgICAgICAgdmFyIEhhc2hNYXAgPSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgYW4gb2JqZWN0IGluIGRpY3Rpb25hcnkgbW9kZSAoYS5rLmEuIFwic2xvd1wiIG1vZGUgaW4gdjgpXG4gICAgICAgICAgICBjcmVhdGU6IHN1cHBvcnRzQ3JlYXRlXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeShPYmplY3QuY3JlYXRlKG51bGwpKTsgfVxuICAgICAgICAgICAgICAgIDogc3VwcG9ydHNQcm90b1xuICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KHsgX19wcm90b19fOiBudWxsIH0pOyB9XG4gICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoe30pOyB9LFxuICAgICAgICAgICAgaGFzOiBkb3duTGV2ZWxcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gaGFzT3duLmNhbGwobWFwLCBrZXkpOyB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGtleSBpbiBtYXA7IH0sXG4gICAgICAgICAgICBnZXQ6IGRvd25MZXZlbFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBoYXNPd24uY2FsbChtYXAsIGtleSkgPyBtYXBba2V5XSA6IHVuZGVmaW5lZDsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBtYXBba2V5XTsgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTG9hZCBnbG9iYWwgb3Igc2hpbSB2ZXJzaW9ucyBvZiBNYXAsIFNldCwgYW5kIFdlYWtNYXBcbiAgICAgICAgdmFyIGZ1bmN0aW9uUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKEZ1bmN0aW9uKTtcbiAgICAgICAgdmFyIHVzZVBvbHlmaWxsID0gdHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnZbXCJSRUZMRUNUX01FVEFEQVRBX1VTRV9NQVBfUE9MWUZJTExcIl0gPT09IFwidHJ1ZVwiO1xuICAgICAgICB2YXIgX01hcCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIE1hcC5wcm90b3R5cGUuZW50cmllcyA9PT0gXCJmdW5jdGlvblwiID8gTWFwIDogQ3JlYXRlTWFwUG9seWZpbGwoKTtcbiAgICAgICAgdmFyIF9TZXQgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIFNldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IFNldCA6IENyZWF0ZVNldFBvbHlmaWxsKCk7XG4gICAgICAgIHZhciBfV2Vha01hcCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgV2Vha01hcCA9PT0gXCJmdW5jdGlvblwiID8gV2Vha01hcCA6IENyZWF0ZVdlYWtNYXBQb2x5ZmlsbCgpO1xuICAgICAgICAvLyBbW01ldGFkYXRhXV0gaW50ZXJuYWwgc2xvdFxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeS1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHNcbiAgICAgICAgdmFyIE1ldGFkYXRhID0gbmV3IF9XZWFrTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBsaWVzIGEgc2V0IG9mIGRlY29yYXRvcnMgdG8gYSBwcm9wZXJ0eSBvZiBhIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBkZWNvcmF0b3JzIEFuIGFycmF5IG9mIGRlY29yYXRvcnMuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgdG8gZGVjb3JhdGUuXG4gICAgICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzIChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIHRoZSB0YXJnZXQga2V5LlxuICAgICAgICAgKiBAcmVtYXJrcyBEZWNvcmF0b3JzIGFyZSBhcHBsaWVkIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIEV4YW1wbGUgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIikpKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIixcbiAgICAgICAgICogICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIikpKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChhdHRyaWJ1dGVzKSAmJiAhSXNVbmRlZmluZWQoYXR0cmlidXRlcykgJiYgIUlzTnVsbChhdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmIChJc051bGwoYXR0cmlidXRlcykpXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghSXNBcnJheShkZWNvcmF0b3JzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNDb25zdHJ1Y3Rvcih0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERlY29yYXRlQ29uc3RydWN0b3IoZGVjb3JhdG9ycywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImRlY29yYXRlXCIsIGRlY29yYXRlKTtcbiAgICAgICAgLy8gNC4xLjIgUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSlcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jcmVmbGVjdC5tZXRhZGF0YVxuICAgICAgICAvKipcbiAgICAgICAgICogQSBkZWZhdWx0IG1ldGFkYXRhIGRlY29yYXRvciBmYWN0b3J5IHRoYXQgY2FuIGJlIHVzZWQgb24gYSBjbGFzcywgY2xhc3MgbWVtYmVyLCBvciBwYXJhbWV0ZXIuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBUaGUga2V5IGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YVZhbHVlIFRoZSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGVudHJ5LlxuICAgICAgICAgKiBAcmV0dXJucyBBIGRlY29yYXRvciBmdW5jdGlvbi5cbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogSWYgYG1ldGFkYXRhS2V5YCBpcyBhbHJlYWR5IGRlZmluZWQgZm9yIHRoZSB0YXJnZXQgYW5kIHRhcmdldCBrZXksIHRoZVxuICAgICAgICAgKiBtZXRhZGF0YVZhbHVlIGZvciB0aGF0IGtleSB3aWxsIGJlIG92ZXJ3cml0dGVuLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvciwgVHlwZVNjcmlwdCBvbmx5KVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlLCBUeXBlU2NyaXB0IG9ubHkpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHByb3BlcnR5O1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZCgpIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZCgpIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkgJiYgIUlzUHJvcGVydHlLZXkocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwibWV0YWRhdGFcIiwgbWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIGEgdW5pcXVlIG1ldGFkYXRhIGVudHJ5IG9uIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgQSB2YWx1ZSB0aGF0IGNvbnRhaW5zIGF0dGFjaGVkIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRvIGRlZmluZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGRlY29yYXRvciBmYWN0b3J5IGFzIG1ldGFkYXRhLXByb2R1Y2luZyBhbm5vdGF0aW9uLlxuICAgICAgICAgKiAgICAgZnVuY3Rpb24gTXlBbm5vdGF0aW9uKG9wdGlvbnMpOiBEZWNvcmF0b3Ige1xuICAgICAgICAgKiAgICAgICAgIHJldHVybiAodGFyZ2V0LCBrZXk/KSA9PiBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgdGFyZ2V0LCBrZXkpO1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVmaW5lTWV0YWRhdGFcIiwgZGVmaW5lTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluIGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBrZXkgd2FzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbjsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiaGFzTWV0YWRhdGFcIiwgaGFzTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGFyZ2V0IG9iamVjdCBoYXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEga2V5IHdhcyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0OyBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJoYXNPd25NZXRhZGF0YVwiLCBoYXNPd25NZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGtleSBpZiBmb3VuZDsgb3RoZXJ3aXNlLCBgdW5kZWZpbmVkYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE1ldGFkYXRhXCIsIGdldE1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGtleSBpZiBmb3VuZDsgb3RoZXJ3aXNlLCBgdW5kZWZpbmVkYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE93bk1ldGFkYXRhXCIsIGdldE93bk1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIGtleXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiB1bmlxdWUgbWV0YWRhdGEga2V5cy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlNZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRNZXRhZGF0YUtleXNcIiwgZ2V0TWV0YWRhdGFLZXlzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHVuaXF1ZSBtZXRhZGF0YSBrZXlzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE93bk1ldGFkYXRhS2V5c1wiLCBnZXRPd25NZXRhZGF0YUtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVsZXRlcyB0aGUgbWV0YWRhdGEgZW50cnkgZnJvbSB0aGUgdGFyZ2V0IG9iamVjdCB3aXRoIHRoZSBwcm92aWRlZCBrZXkuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBlbnRyeSB3YXMgZm91bmQgYW5kIGRlbGV0ZWQ7IG90aGVyd2lzZSwgZmFsc2UuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgcHJvcGVydHlLZXksIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIW1ldGFkYXRhTWFwLmRlbGV0ZShtZXRhZGF0YUtleSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhTWFwLnNpemUgPiAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgdmFyIHRhcmdldE1ldGFkYXRhID0gTWV0YWRhdGEuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB0YXJnZXRNZXRhZGF0YS5kZWxldGUocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgaWYgKHRhcmdldE1ldGFkYXRhLnNpemUgPiAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgTWV0YWRhdGEuZGVsZXRlKHRhcmdldCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImRlbGV0ZU1ldGFkYXRhXCIsIGRlbGV0ZU1ldGFkYXRhKTtcbiAgICAgICAgZnVuY3Rpb24gRGVjb3JhdGVDb25zdHJ1Y3RvcihkZWNvcmF0b3JzLCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRlZCA9IGRlY29yYXRvcih0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZGVjb3JhdGVkKSAmJiAhSXNOdWxsKGRlY29yYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKGRlY29yYXRlZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGRlY29yYXRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIERlY29yYXRlUHJvcGVydHkoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9yc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdGVkID0gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZGVjb3JhdGVkKSAmJiAhSXNOdWxsKGRlY29yYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChkZWNvcmF0ZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZGVjb3JhdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgQ3JlYXRlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBNZXRhZGF0YS5nZXQoTyk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQodGFyZ2V0TWV0YWRhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFDcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgX01hcCgpO1xuICAgICAgICAgICAgICAgIE1ldGFkYXRhLnNldChPLCB0YXJnZXRNZXRhZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSB0YXJnZXRNZXRhZGF0YS5nZXQoUCk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFDcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGFNYXAgPSBuZXcgX01hcCgpO1xuICAgICAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhLnNldChQLCBtZXRhZGF0YU1hcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWV0YWRhdGFNYXA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjEuMSBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWhhc21ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBoYXNPd24gPSBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgICAgICAgICAgIGlmIChoYXNPd24pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICghSXNOdWxsKHBhcmVudCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjIuMSBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWhhc293bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBUb0Jvb2xlYW4obWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjMuMSBPcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWdldG1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBoYXNPd24gPSBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgICAgICAgICAgIGlmIChoYXNPd24pXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAoIUlzTnVsbChwYXJlbnQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNC4xIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5Z2V0b3dubWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS41LjEgT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlkZWZpbmVvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gdHJ1ZSk7XG4gICAgICAgICAgICBtZXRhZGF0YU1hcC5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS42LjEgT3JkaW5hcnlNZXRhZGF0YUtleXMoTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnltZXRhZGF0YWtleXNcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlNZXRhZGF0YUtleXMoTywgUCkge1xuICAgICAgICAgICAgdmFyIG93bktleXMgPSBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gb3duS2V5cztcbiAgICAgICAgICAgIHZhciBwYXJlbnRLZXlzID0gT3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRLZXlzLmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xuICAgICAgICAgICAgaWYgKG93bktleXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEtleXM7XG4gICAgICAgICAgICB2YXIgc2V0ID0gbmV3IF9TZXQoKTtcbiAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG93bktleXNfMSA9IG93bktleXM7IF9pIDwgb3duS2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBvd25LZXlzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBoYXNLZXkgPSBzZXQuaGFzKGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHBhcmVudEtleXNfMSA9IHBhcmVudEtleXM7IF9hIDwgcGFyZW50S2V5c18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBwYXJlbnRLZXlzXzFbX2FdO1xuICAgICAgICAgICAgICAgIHZhciBoYXNLZXkgPSBzZXQuaGFzKGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNy4xIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5b3dubWV0YWRhdGFrZXlzXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgICAgIHZhciBrZXlzT2JqID0gbWV0YWRhdGFNYXAua2V5cygpO1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gR2V0SXRlcmF0b3Ioa2V5c09iaik7XG4gICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5sZW5ndGggPSBrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAga2V5c1trXSA9IG5leHRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNiBFQ01BU2NyaXB0IERhdGEgVHlwMGVzIGFuZCBWYWx1ZXNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1kYXRhLXR5cGVzLWFuZC12YWx1ZXNcbiAgICAgICAgZnVuY3Rpb24gVHlwZSh4KSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBOdWxsICovO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjogcmV0dXJuIDAgLyogVW5kZWZpbmVkICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6IHJldHVybiAyIC8qIEJvb2xlYW4gKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiByZXR1cm4gMyAvKiBTdHJpbmcgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcInN5bWJvbFwiOiByZXR1cm4gNCAvKiBTeW1ib2wgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOiByZXR1cm4gNSAvKiBOdW1iZXIgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOiByZXR1cm4geCA9PT0gbnVsbCA/IDEgLyogTnVsbCAqLyA6IDYgLyogT2JqZWN0ICovO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiA2IC8qIE9iamVjdCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuMSBUaGUgVW5kZWZpbmVkIFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy11bmRlZmluZWQtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc1VuZGVmaW5lZCh4KSB7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS4yIFRoZSBOdWxsIFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy1udWxsLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNOdWxsKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS41IFRoZSBTeW1ib2wgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLXN5bWJvbC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzU3ltYm9sKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuNyBUaGUgT2JqZWN0IFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNPYmplY3QoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiID8geCAhPT0gbnVsbCA6IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xIFR5cGUgQ29udmVyc2lvblxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlLWNvbnZlcnNpb25cbiAgICAgICAgLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4gICAgICAgIGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKFR5cGUoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIFVuZGVmaW5lZCAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBOdWxsICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAyIC8qIEJvb2xlYW4gKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDMgLyogU3RyaW5nICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSA0IC8qIFN5bWJvbCAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgNSAvKiBOdW1iZXIgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoaW50ID0gUHJlZmVycmVkVHlwZSA9PT0gMyAvKiBTdHJpbmcgKi8gPyBcInN0cmluZ1wiIDogUHJlZmVycmVkVHlwZSA9PT0gNSAvKiBOdW1iZXIgKi8gPyBcIm51bWJlclwiIDogXCJkZWZhdWx0XCI7XG4gICAgICAgICAgICB2YXIgZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCB0b1ByaW1pdGl2ZVN5bWJvbCk7XG4gICAgICAgICAgICBpZiAoZXhvdGljVG9QcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZXhvdGljVG9QcmltLmNhbGwoaW5wdXQsIGhpbnQpO1xuICAgICAgICAgICAgICAgIGlmIChJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBoaW50ID09PSBcImRlZmF1bHRcIiA/IFwibnVtYmVyXCIgOiBoaW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMS4xIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpIHtcbiAgICAgICAgICAgIGlmIChoaW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvU3RyaW5nXzEgPSBPLnRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHRvU3RyaW5nXzEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b1N0cmluZ18xLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9mID0gTy52YWx1ZU9mO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHZhbHVlT2YpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZU9mLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlT2YuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRvU3RyaW5nXzIgPSBPLnRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHRvU3RyaW5nXzIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b1N0cmluZ18yLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4yIFRvQm9vbGVhbihhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLzIwMTYvI3NlYy10b2Jvb2xlYW5cbiAgICAgICAgZnVuY3Rpb24gVG9Cb29sZWFuKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gISFhcmd1bWVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMTIgVG9TdHJpbmcoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvc3RyaW5nXG4gICAgICAgIGZ1bmN0aW9uIFRvU3RyaW5nKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIGFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xNCBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG4gICAgICAgIGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBUb1ByaW1pdGl2ZShhcmd1bWVudCwgMyAvKiBTdHJpbmcgKi8pO1xuICAgICAgICAgICAgaWYgKElzU3ltYm9sKGtleSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIHJldHVybiBUb1N0cmluZyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMiBUZXN0aW5nIGFuZCBDb21wYXJpc29uIE9wZXJhdGlvbnNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGVzdGluZy1hbmQtY29tcGFyaXNvbi1vcGVyYXRpb25zXG4gICAgICAgIC8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbiAgICAgICAgZnVuY3Rpb24gSXNBcnJheShhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXlcbiAgICAgICAgICAgICAgICA/IEFycmF5LmlzQXJyYXkoYXJndW1lbnQpXG4gICAgICAgICAgICAgICAgOiBhcmd1bWVudCBpbnN0YW5jZW9mIE9iamVjdFxuICAgICAgICAgICAgICAgICAgICA/IGFyZ3VtZW50IGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yLjMgSXNDYWxsYWJsZShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxuICAgICAgICBmdW5jdGlvbiBJc0NhbGxhYmxlKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGFuIGFwcHJveGltYXRpb24gYXMgd2UgY2Fubm90IGNoZWNrIGZvciBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yLjQgSXNDb25zdHJ1Y3Rvcihhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxuICAgICAgICBmdW5jdGlvbiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGFuIGFwcHJveGltYXRpb24gYXMgd2UgY2Fubm90IGNoZWNrIGZvciBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuNyBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc3Byb3BlcnR5a2V5XG4gICAgICAgIGZ1bmN0aW9uIElzUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoVHlwZShhcmd1bWVudCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDMgLyogU3RyaW5nICovOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQgLyogU3ltYm9sICovOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4zIE9wZXJhdGlvbnMgb24gT2JqZWN0c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcGVyYXRpb25zLW9uLW9iamVjdHNcbiAgICAgICAgLy8gNy4zLjkgR2V0TWV0aG9kKFYsIFApXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxuICAgICAgICBmdW5jdGlvbiBHZXRNZXRob2QoViwgUCkge1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBWW1BdO1xuICAgICAgICAgICAgaWYgKGZ1bmMgPT09IHVuZGVmaW5lZCB8fCBmdW5jID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoIUlzQ2FsbGFibGUoZnVuYykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40IE9wZXJhdGlvbnMgb24gSXRlcmF0b3IgT2JqZWN0c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcGVyYXRpb25zLW9uLWl0ZXJhdG9yLW9iamVjdHNcbiAgICAgICAgZnVuY3Rpb24gR2V0SXRlcmF0b3Iob2JqKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gR2V0TWV0aG9kKG9iaiwgaXRlcmF0b3JTeW1ib2wpO1xuICAgICAgICAgICAgaWYgKCFJc0NhbGxhYmxlKG1ldGhvZCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyAvLyBmcm9tIENhbGxcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG1ldGhvZC5jYWxsKG9iaik7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGl0ZXJhdG9yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40LjQgSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLWl0ZXJhdG9ydmFsdWVcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlclJlc3VsdC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yc3RlcFxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyBmYWxzZSA6IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pdGVyYXRvcmNsb3NlXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciBmID0gaXRlcmF0b3JbXCJyZXR1cm5cIl07XG4gICAgICAgICAgICBpZiAoZilcbiAgICAgICAgICAgICAgICBmLmNhbGwoaXRlcmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDkuMSBPcmRpbmFyeSBPYmplY3QgSW50ZXJuYWwgTWV0aG9kcyBhbmQgSW50ZXJuYWwgU2xvdHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzXG4gICAgICAgIC8vIDkuMS4xLjEgT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeWdldHByb3RvdHlwZW9mXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTykge1xuICAgICAgICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBPICE9PSBcImZ1bmN0aW9uXCIgfHwgTyA9PT0gZnVuY3Rpb25Qcm90b3R5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IHNldCBfX3Byb3RvX18gaW4gRVM1LCBhcyBpdCdzIG5vbi1zdGFuZGFyZC5cbiAgICAgICAgICAgIC8vIFRyeSB0byBkZXRlcm1pbmUgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IuIENvbXBhdGlibGUgaW1wbGVtZW50YXRpb25zXG4gICAgICAgICAgICAvLyBtdXN0IGVpdGhlciBzZXQgX19wcm90b19fIG9uIGEgc3ViY2xhc3MgY29uc3RydWN0b3IgdG8gdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IsXG4gICAgICAgICAgICAvLyBvciBlbnN1cmUgZWFjaCBjbGFzcyBoYXMgYSB2YWxpZCBgY29uc3RydWN0b3JgIHByb3BlcnR5IG9uIGl0cyBwcm90b3R5cGUgdGhhdFxuICAgICAgICAgICAgLy8gcG9pbnRzIGJhY2sgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgRnVuY3Rpb24uW1tQcm90b3R5cGVdXSwgdGhlbiB0aGlzIGlzIGRlZmluYXRlbHkgaW5oZXJpdGVkLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2FzZSB3aGVuIGluIEVTNiBvciB3aGVuIHVzaW5nIF9fcHJvdG9fXyBpbiBhIGNvbXBhdGlibGUgYnJvd3Nlci5cbiAgICAgICAgICAgIGlmIChwcm90byAhPT0gZnVuY3Rpb25Qcm90b3R5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHN1cGVyIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlLCBudWxsLCBvciB1bmRlZmluZWQsIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gTy5wcm90b3R5cGU7XG4gICAgICAgICAgICB2YXIgcHJvdG90eXBlUHJvdG8gPSBwcm90b3R5cGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSk7XG4gICAgICAgICAgICBpZiAocHJvdG90eXBlUHJvdG8gPT0gbnVsbCB8fCBwcm90b3R5cGVQcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB0aGUgY29uc3RydWN0b3Igd2FzIG5vdCBhIGZ1bmN0aW9uLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvdG90eXBlUHJvdG8uY29uc3RydWN0b3I7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0cnVjdG9yICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBzb21lIGtpbmQgb2Ygc2VsZi1yZWZlcmVuY2UsIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICBpZiAoY29uc3RydWN0b3IgPT09IE8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIHByZXR0eSBnb29kIGd1ZXNzIGF0IHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3RvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBNYXAgc2hpbVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVNYXBQb2x5ZmlsbCgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZVNlbnRpbmVsID0ge307XG4gICAgICAgICAgICB2YXIgYXJyYXlTZW50aW5lbCA9IFtdO1xuICAgICAgICAgICAgdmFyIE1hcEl0ZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKGtleXMsIHZhbHVlcywgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0ga2V5cztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5faW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5fa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zZWxlY3Rvcih0aGlzLl9rZXlzW2luZGV4XSwgdGhpcy5fdmFsdWVzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID49IHRoaXMuX2tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHQsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLnJldHVybiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXBJdGVyYXRvcjtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1hcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2tleXMubGVuZ3RoOyB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKSA+PSAwOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA+PSAwID8gdGhpcy5fdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBpbmRleCArIDE7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzW2kgLSAxXSA9IHRoaXMuX2tleXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2kgLSAxXSA9IHRoaXMuX3ZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMubGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLl9jYWNoZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldEtleSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRWYWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0RW50cnkpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLl9maW5kID0gZnVuY3Rpb24gKGtleSwgaW5zZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUtleSAhPT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gdGhpcy5fa2V5cy5pbmRleE9mKHRoaXMuX2NhY2hlS2V5ID0ga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVJbmRleCA8IDAgJiYgaW5zZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlSW5kZXg7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFwO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEtleShrZXksIF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VmFsdWUoXywgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRFbnRyeShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtrZXksIHZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBTZXQgc2hpbVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVTZXRQb2x5ZmlsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU2V0KCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXAgPSBuZXcgX01hcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2V0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAuc2l6ZTsgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuc2V0KHZhbHVlLCB2YWx1ZSksIHRoaXM7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5kZWxldGUodmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX21hcC5jbGVhcigpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5rZXlzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAudmFsdWVzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLmVudHJpZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlW1wiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzKCk7IH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldDtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmFpdmUgV2Vha01hcCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZVdlYWtNYXBQb2x5ZmlsbCgpIHtcbiAgICAgICAgICAgIHZhciBVVUlEX1NJWkUgPSAxNjtcbiAgICAgICAgICAgIHZhciBrZXlzID0gSGFzaE1hcC5jcmVhdGUoKTtcbiAgICAgICAgICAgIHZhciByb290S2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XG4gICAgICAgICAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gSGFzaE1hcC5oYXModGFibGUsIHRoaXMuX2tleSkgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlICE9PSB1bmRlZmluZWQgPyBIYXNoTWFwLmdldCh0YWJsZSwgdGhpcy5fa2V5KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVbdGhpcy5fa2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlICE9PSB1bmRlZmluZWQgPyBkZWxldGUgdGFibGVbdGhpcy5fa2V5XSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IG5vdCBhIHJlYWwgY2xlYXIsIGp1c3QgbWFrZXMgdGhlIHByZXZpb3VzIGRhdGEgdW5yZWFjaGFibGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gV2Vha01hcDtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVVbmlxdWVLZXkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleTtcbiAgICAgICAgICAgICAgICBkb1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBcIkBAV2Vha01hcEBAXCIgKyBDcmVhdGVVVUlEKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKEhhc2hNYXAuaGFzKGtleXMsIGtleSkpO1xuICAgICAgICAgICAgICAgIGtleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgY3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPd24uY2FsbCh0YXJnZXQsIHJvb3RLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcm9vdEtleSwgeyB2YWx1ZTogSGFzaE1hcC5jcmVhdGUoKSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtyb290S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEZpbGxSYW5kb21CeXRlcyhidWZmZXIsIHNpemUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyW2ldID0gTWF0aC5yYW5kb20oKSAqIDB4ZmYgfCAwO1xuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBHZW5SYW5kb21CeXRlcyhzaXplKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBVaW50OEFycmF5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbXNDcnlwdG8gIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZpbGxSYW5kb21CeXRlcyhuZXcgVWludDhBcnJheShzaXplKSwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBGaWxsUmFuZG9tQnl0ZXMobmV3IEFycmF5KHNpemUpLCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZVVVSUQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBHZW5SYW5kb21CeXRlcyhVVUlEX1NJWkUpO1xuICAgICAgICAgICAgICAgIC8vIG1hcmsgYXMgcmFuZG9tIC0gUkZDIDQxMjIgwqcgNC40XG4gICAgICAgICAgICAgICAgZGF0YVs2XSA9IGRhdGFbNl0gJiAweDRmIHwgMHg0MDtcbiAgICAgICAgICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSAmIDB4YmYgfCAweDgwO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IFVVSURfU0laRTsgKytvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ5dGUgPSBkYXRhW29mZnNldF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IDQgfHwgb2Zmc2V0ID09PSA2IHx8IG9mZnNldCA9PT0gOClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIi1cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ5dGUgPCAxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGJ5dGUudG9TdHJpbmcoMTYpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXNlcyBhIGhldXJpc3RpYyB1c2VkIGJ5IHY4IGFuZCBjaGFrcmEgdG8gZm9yY2UgYW4gb2JqZWN0IGludG8gZGljdGlvbmFyeSBtb2RlLlxuICAgICAgICBmdW5jdGlvbiBNYWtlRGljdGlvbmFyeShvYmopIHtcbiAgICAgICAgICAgIG9iai5fXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmouX187XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfSk7XG59KShSZWZsZWN0IHx8IChSZWZsZWN0ID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BID0gdm9pZCAwO1xudmFyIGNvbnRhaW5lcl8xID0gcmVxdWlyZShcIi4vY29udGFpbmVyXCIpO1xudmFyIEEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLy8gY29uc3RydWN0b3IoYjogQikge1xuICAgIC8vICAgdGhpcy5iID0gYjtcbiAgICAvLyB9XG4gICAgZnVuY3Rpb24gQSgpIHtcbiAgICAgICAgdGhpcy5iID0gY29udGFpbmVyXzEuY29udGFpbmVyLmdldCgnYicpO1xuICAgIH1cbiAgICByZXR1cm4gQTtcbn0oKSk7XG5leHBvcnRzLkEgPSBBO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkIgPSB2b2lkIDA7XG52YXIgQiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCKHApIHtcbiAgICAgICAgdGhpcy5wID0gcDtcbiAgICB9XG4gICAgcmV0dXJuIEI7XG59KCkpO1xuZXhwb3J0cy5CID0gQjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb250YWluZXIgPSBleHBvcnRzLkNvbnRhaW5lciA9IHZvaWQgMDtcbnZhciBDb250YWluZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyKCkge1xuICAgICAgICB0aGlzLmJpbmRNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8vIOWunuS+i+eahOazqOWGjFxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChpZGVudGlmaWVyLCBjbGF6eiwgY29uc3RydWN0b3JBcmdzKSB7XG4gICAgICAgIHRoaXMuYmluZE1hcC5zZXQoaWRlbnRpZmllciwge1xuICAgICAgICAgICAgY2xheno6IGNsYXp6LFxuICAgICAgICAgICAgY29uc3RydWN0b3JBcmdzOiBjb25zdHJ1Y3RvckFyZ3NcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyDlrp7kvovnmoTojrflj5ZcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmJpbmRNYXAuZ2V0KGlkZW50aWZpZXIpO1xuICAgICAgICB2YXIgY2xhenogPSB0YXJnZXQuY2xhenosIGNvbnN0cnVjdG9yQXJncyA9IHRhcmdldC5jb25zdHJ1Y3RvckFyZ3M7XG4gICAgICAgIHZhciBpbnN0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoY2xhenosIGNvbnN0cnVjdG9yQXJncyk7XG4gICAgICAgIHJldHVybiBpbnN0O1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRhaW5lcjtcbn0oKSk7XG5leHBvcnRzLkNvbnRhaW5lciA9IENvbnRhaW5lcjtcbnZhciBjb250YWluZXIgPSBuZXcgQ29udGFpbmVyKCk7XG5leHBvcnRzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CID0gdm9pZCAwO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5yZXF1aXJlKFwicmVmbGVjdC1tZXRhZGF0YVwiKTtcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG4vLyBSZWZsZWN0Lm1ldGFkYXRhIOW9k+S9nCBEZWNvcmF0b3Ig5L2/55So77yM5b2T5L+u6aWw57G75pe277yM5Zyo57G75LiK5re75Yqg5YWD5pWw5o2u77yM5b2T5L+u6aWw57G75bGe5oCn5pe277yM5Zyo57G75Y6f5Z6L55qE5bGe5oCn5LiK5re75Yqg5YWD5pWw5o2u77yMXG52YXIgQ0xBU1NfS0VZID0gJ2lvYzprZXknO1xudmFyIE1FVEhPRF9LRVkgPSAnaW9jOmtleSc7XG52YXIgVGVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUZXN0KCkge1xuICAgIH1cbiAgICBUZXN0LnByb3RvdHlwZS5oZWxsbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdoZWxsbyB3b3JsZCc7XG4gICAgfTtcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBSZWZsZWN0Lm1ldGFkYXRhKE1FVEhPRF9LRVksICdCJyksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEZ1bmN0aW9uKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW10pLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgVGVzdC5wcm90b3R5cGUsIFwiaGVsbG9cIiwgbnVsbCk7XG4gICAgVGVzdCA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIFJlZmxlY3QubWV0YWRhdGEoQ0xBU1NfS0VZLCAnQScpXG4gICAgXSwgVGVzdCk7XG4gICAgcmV0dXJuIFRlc3Q7XG59KCkpO1xuY29uc29sZS5sb2coUmVmbGVjdC5nZXRNZXRhZGF0YShDTEFTU19LRVksIFRlc3QpKTsgLy8gJ0EnXG5jb25zb2xlLmxvZyhSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEhPRF9LRVksIG5ldyBUZXN0KCksICdoZWxsbycpKTsgLy8gJ0InXG52YXIgQiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCKHApIHtcbiAgICAgICAgdGhpcy5wID0gcDtcbiAgICB9XG4gICAgQiA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIHByb3ZpZGVyXzEuUHJvdmlkZXIoJ2InLCBbMTBdKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW051bWJlcl0pXG4gICAgXSwgQik7XG4gICAgcmV0dXJuIEI7XG59KCkpO1xuZXhwb3J0cy5CID0gQjtcbmNvbnNvbGUubG9nKG5ldyBCKDEpKTtcbmNvbnNvbGUubG9nKFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ2lvYzp0YWdnZWRfY2xhc3MnLCBCKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZCA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGZzID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIocmVxdWlyZShcImZzXCIpKTtcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG5mdW5jdGlvbiBsb2FkKGNvbnRhaW5lcikge1xuICAgIHZhciBlXzEsIF9hO1xuICAgIHZhciBsaXN0ID0gZnMucmVhZGRpclN5bmMoJy4vJyk7XG4gICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgbGlzdF8xID0gdHNsaWJfMS5fX3ZhbHVlcyhsaXN0KSwgbGlzdF8xXzEgPSBsaXN0XzEubmV4dCgpOyAhbGlzdF8xXzEuZG9uZTsgbGlzdF8xXzEgPSBsaXN0XzEubmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IGxpc3RfMV8xLnZhbHVlO1xuICAgICAgICAgICAgaWYgKC9cXC50cyQvLnRlc3QoZmlsZSkpIHsgLy8g5omr5o+PIHRzIOaWh+S7tlxuICAgICAgICAgICAgICAgIHZhciBleHBvcnRzID0gcmVxdWlyZShcIi4vXCIgKyBmaWxlKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtIGluIGV4cG9ydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IGV4cG9ydHNbbV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKHByb3ZpZGVyXzEuQ0xBU1NfS0VZLCBtb2R1bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5rOo5YaM5a6e5L6LXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYmluZChtZXRhZGF0YS5pZCwgbW9kdWxlLCBtZXRhZGF0YS5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGxpc3RfMV8xICYmICFsaXN0XzFfMS5kb25lICYmIChfYSA9IGxpc3RfMS5yZXR1cm4pKSBfYS5jYWxsKGxpc3RfMSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgIH1cbn1cbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb250YWluZXJfMSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5lclwiKTtcbnZhciBsb2FkXzEgPSByZXF1aXJlKFwiLi9sb2FkXCIpO1xuLy8gY29uc3QgYiA9IG5ldyBCKDEwKTtcbi8vIGNvbnN0IGEgPSBuZXcgQShiKTtcbi8vIGNvbnNvbGUubG9nKGEpOyAvLyBBIHsgYjogQiB7IHA6IDEwIH0gfVxuLy8gY29udGFpbmVyLmJpbmQoJ2EnLCBBLCBbXSk7XG4vLyBjb250YWluZXIuYmluZCgnYicsIEIsIFsxMF0pXG4vLyBjb25zdCBhID0gY29udGFpbmVyLmdldCgnYScpO1xuLy8gY29uc29sZS5sb2coYSk7IC8vIEEgPT4geyBiOiBCIHsgcDogMTAgfSB9XG5sb2FkXzEubG9hZChjb250YWluZXJfMS5jb250YWluZXIpO1xuY29uc29sZS5sb2coY29udGFpbmVyXzEuY29udGFpbmVyLmdldCgnYScpKTsgLy8gQSA9PiB7IGI6IEIgeyBwOiAxMCB9IH1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm92aWRlciA9IGV4cG9ydHMuQ0xBU1NfS0VZID0gdm9pZCAwO1xuLy8g6KOF6aWw5ZmoXG5yZXF1aXJlKFwicmVmbGVjdC1tZXRhZGF0YVwiKTtcbmV4cG9ydHMuQ0xBU1NfS0VZID0gJ2lvYzp0YWdnZWRfY2xhc3MnO1xuZnVuY3Rpb24gUHJvdmlkZXIoaWRlbnRpZmllciwgYXJncykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoZXhwb3J0cy5DTEFTU19LRVksIHtcbiAgICAgICAgICAgIGlkOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgYXJnczogYXJncyB8fCBbXVxuICAgICAgICB9LCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG59XG5leHBvcnRzLlByb3ZpZGVyID0gUHJvdmlkZXI7XG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYVwiOiA4NjIsXG5cdFwiLi9hLnRzXCI6IDg2Mixcblx0XCIuL2JcIjogNDI4LFxuXHRcIi4vYi50c1wiOiA0MjgsXG5cdFwiLi9jb250YWluZXJcIjogNDIxLFxuXHRcIi4vY29udGFpbmVyLnRzXCI6IDQyMSxcblx0XCIuL2RlbW9cIjogNDg5LFxuXHRcIi4vZGVtby50c1wiOiA0ODksXG5cdFwiLi9sb2FkXCI6IDk4Mixcblx0XCIuL2xvYWQudHNcIjogOTgyLFxuXHRcIi4vbWFpblwiOiA5ODEsXG5cdFwiLi9tYWluLnRzXCI6IDk4MSxcblx0XCIuL3Byb3ZpZGVyXCI6IDQ5LFxuXHRcIi4vcHJvdmlkZXIudHNcIjogNDksXG5cdFwiLi9xdWVzdGlvblwiOiA2NTYsXG5cdFwiLi9xdWVzdGlvbi50c1wiOiA2NTZcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxMTY7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXyg5ODEpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==